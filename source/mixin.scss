/**
 * Global mixins
 * @author Martin Adamec
 * @url http://adamecmartin.cz
 */


/**
 * Box-sizing property
 * @param {$type} Property value
 */
@mixin boxSizing($val: border-box)
{
	box-sizing: $val;
}



/**
 * Box-shadow property
 * @param {$val} Preperty value
 */
@mixin boxShadow($val...)
{
	box-shadow: $val;
}


/**
 * Transform: 2D translate
 * @param {$x} X axis
 * @param {$y} Y axis
 */
@mixin translate2D($x, $y)
{
	transform: translate($x, $y);
}



/**
 * Clearfix
 * @param {$list} Array of class
 */
@mixin __Clearfix($list)
{
	@each $item in $list {
		.#{$item} {
			&:before, &:after {
				content: " ";
				display: table;
			}
			&:after {
				clear: both;
			}
		}
	}
}



/**
 * Font properties
 * @param {$size}   Font-size
 * @param {$lh}     Line-height
 * @param {$weight} Font weight
 */
@mixin font($size, $lh: 1.3em, $weight: null)
{
	font-size: $size;
	// Line height
	@if $lh != null {
		line-height: $lh;
	}
	// Font weight
	@if $weight != null {
		font-weight: $weight;
	}
}



/**
 * Text decoration
 * @param {$normal} Text-decoration when non hover
 * @param {$hover} Text-decoration when hover, focus
 */
@mixin underline($normal: 0, $hover: 0)
{
	@if $normal == 1 {
		text-decoration: underline;
	}
	@else {
		text-decoration: none;
	}
	// Hover
	@if $hover == 1 {
		&:hover, &:focus {text-decoration: underline;}
	}
	@else {
		&:hover, &:focus {text-decoration: none;}
	}
}



/**
 * Transition
 * @param {$val} Transition property
 */
@mixin transition($val...)
{
	transition: $val;
}


/**
 * Border radius
 * @param {$val} Border-radius value
 */
@mixin radius($val: $radius)
{
	border-radius: $val;
}
// Reset border-radius
@mixin radiusReset()
{
	@include radius(none);
}


/**
 * Gradient helper
 * @param {$x}    Top/left color
 * @param {$y}    Bottom/right color
 * @param {$bg}   Background color for old browser
 * @param {$type} Direction of gradient
 */
@mixin gradient($x, $y, $bg: null, $type: vertical)
{
	// Bg
	@if $bg == null {
		$bg: $x;
	}
	// Vertical
	@if $type == vertical
	{
		background: $x;
		background: -moz-linear-gradient(top, $x 0%, $y 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$x), color-stop(100%,$y));
		background: -webkit-linear-gradient(top, $x 0%,$y 100%);
		background: -o-linear-gradient(top, $x 0%,$y 100%);
		background: -ms-linear-gradient(top, $x 0%,$y 100%);
		background: linear-gradient(to bottom, $x 0%,$y 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$x}', endColorstr='#{$y}',GradientType=0 );
	}
	// Horizontal
	@else {
		background: $x;
		background: -moz-linear-gradient(left, $x 0%, $y 100%);
		background: -webkit-gradient(linear, left top, right top, color-stop(0%,$x), color-stop(100%,$y));
		background: -webkit-linear-gradient(left, $x 0%,$y 100%);
		background: -o-linear-gradient(left, $x 0%,$y 100%);
		background: -ms-linear-gradient(left, $x 0%,$y 100%);
		background: linear-gradient(to right, $x 0%,$y 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$x}', endColorstr='#{$y}',GradientType=1 );
	}
}


/**
 * Opacity
 */
@mixin opacity($val)
{
	filter: alpha (opacity=#{$val*100});
	opacity: $val;
}


/**
 * Flex grid
 * @param {$val} Property value
 */
@mixin flex($val: 1)
{
	box-flex: $val;
	// New version
	flex: $val;
}


/**
 * Headings
 */
@mixin headings {
	h1, h2, h3, h4, h5, h6 {
		@content;
	}
}